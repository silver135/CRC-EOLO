Filtering the VEP outputs for consequences:
awk ‘BEGIN {OFS=”\t”} {if($7==”start_lost” || $7==”stop_gained” || $7==”frameshift_variant” || $7==”inframe_deletion” || $7==”inframe_insertion” || $7==”splice_donor_variant”) print $1,$2}’ Vep96_Chr1_3_try7.vcf > cons_Chr1_3.txt
For missense:
awk ‘BEGIN {OFS=”\t”} {if($7==”missense_variant”) print $0}’ Vep96_Chr1_3_try7.vcf > Chr1_3_missense
grep -I ‘deleterious\|probably_damaging\|possible_damaging’ Chr1_3_missense > Chr1_3_missense_all
grep -v -e “tolerated” -e “benign” -e “unknown” Chr16_2_missense_all > Chr1_3_missense2
awk ‘BEGIN {OFS=”\t”} {print $1,$2}’ Chr1_3_missense2 > Chr1_3_missense_ID

grep ‘-‘ cons_Chr1_3.txt > cons_Chr1_3_grepdash
grep -v ‘-‘ cons_Chr1_3.txt > cons_Chr1_3_grepNOdash
awk ‘{print $2}’ cons_Chr1_3_grepdash > cons_Chr1_3_region5
awk ‘{print $2}’ Chr1_3_missesnse_ID | sed “s/:/\t/g” | awk ‘{print $1”:”$2+1}’ >> cons_Chr1_3_region5
sed “s/:/\t/g” cons_Chr1_3_grepNOdash | awk ‘{if ($2==$6) print $1”:”$2”-“$6+1; else print $1”:”$2”-“$6}’ >> cons_Chr1_3_region5
to check they are all in there:
wc -l cons_Chr1_3.txt Chr1_3_missense_ID
wc -l cons_Chr1_3_region5
to ensure its ready for bcf tools query 
sed 's/-/\t/g' cons_Chr18_3_region5 | awk '{print $1}' > newfile

nano bcftoolsEOLO.sh
grep -Ff query_1_3_alternate_id EOLO_Chr1_MUTYH.vcf.gz > EOLOMUTYH_alternate_headerless
grep ‘^#’ EOLO_Chr1_MUTYH.vcf.gz > MUTYHheader
cat MUTYHheader EOLOMUTYH_alternate_headerless > MUTYH_withheader.vcf
grep -Ff qquery_1_3_alternate_id EOLO_Chr19_STK11.vcf.gz > EOLOSTK11_alternate_headerless
grep ‘alternate_headerless’
ls | grep ‘alternate_headerless’ > headerlessfiles
cat EOLOMUTYH.vcf.gz EOLOMSH6.vcf.gz EOLOMSH2.vcf.gz EOLOMLH1.vcf.gz EOLOMSH3.vcf.gz EOLOAPC.vcf.gz EOLOPMS2.vcf.gz EOLOBMPR1A.vcf.gz EOLOPOLE.vcf.gz EOLOGREM1.vcf.gz EOLONTHL1.vcf.gz EOLORNF43.vcf.gz EOLOSMAD4.vcf.gz EOLOSTK11.vcf.gz EOLOPOLD1.vcf.gz > all_headerless_files 
awk 'BEGIN {OFS='\t'} {print $1,$2,$2+1,$3}' all_headerless_files all_headerless_files_hg38.bed  
awk 'BEGIN {OFS="\t"} {print $1, $2,$2+1, $3}' all_headerless_files > all_headerless_files_hg38.bed 
sh liftover PRS. sh 
awk 'NR==FNR{a[$3]=$0;next}$4 in a{print $0, a[$4]}' all headerless_files hg19_all_headerless_files.bed | less 
awk 'BEGIN {OFS=’\t’} NR==FNR{a[$3]=$0;next}$4 in a{print $0, a($4]}' all_headerless_files hg19_al_headerless_files.bed > hg19_hg38_al_headerless 
awk '{print NF}' hg19_hg38_all_headerless 
awk '(print $1, $2,54for(1=3;i<=NF;++1)printf $1" ",}' hg19_hg38_all_headerless 
nano AwkCommand.sh 
sh AwkCommand.sh 
cat MUTYHheader hg19_headerless > all_genes_hg19.vcf
module load bio/HTSlib/1.9-foss-2018b
module load bio/rvtests/2.1.0
sort -k,1 -k2,2n hg19_headerless > hg19_headerless_sorted
cat MUTYHheader hg19_headerless_sorted > hg19_sorted.vcf
bgzip hg19_sorted.vcf
tabix -p vcf hg19_sorted.vcf.gz
awk ‘{print $1”_”$2,$1”_”$2,$3,$4,$5,$6}’ all_Law_SNPs_v6.fam > tempfam



# Liftover
liftOver PRS_base_Law_hg19.bed hg19ToHg38.over.chain.gz hg38_liftedCOHORT10.bed unlifted_COHORT10.bed

# RV tests
#BSUB -L /bin/bash
#BSUB -n 4
#BSUB -R "span[hosts=1] rusage[mem=3000]"
#BSUB -J RV_test_Chr...
#BSUB -q medium
#BSUB -P re_gecip_cancer_colorectal
#BSUB -o RV_test_Chr.._long%J.log
#BSUB -e RV_test_Chr.._long%J.log
#BSUB -W 24

module load bio/rvtests/2.1.0

rvtest --noweb --inVcf hg19_nochr.vcf.gz --pheno EOLO_V6V8_rvtests.pheno --geneFile /public_data_resources/rvtests_ref/refFlat_hg19.txt --burden cmc --vt price --kernel skat,kbac --out RVtest_all



